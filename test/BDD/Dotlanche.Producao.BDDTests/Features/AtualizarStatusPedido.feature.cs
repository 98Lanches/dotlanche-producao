// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dotlanche.Producao.BDDTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Atualizar status do pedido")]
    public partial class AtualizarStatusDoPedidoFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AtualizarStatusPedido.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Features", "Atualizar status do pedido", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pedido existe e é atualizado com sucesso")]
        public async System.Threading.Tasks.Task PedidoExisteEEAtualizadoComSucesso()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Pedido existe e é atualizado com sucesso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "pedidoId",
                            "QueueKey",
                            "Status",
                            "CreationTime"});
                table1.AddRow(new string[] {
                            "e516249a-93bc-439a-b004-0bf15e42c3ad",
                            "3",
                            "Recebido",
                            "2024-11-20 13:06:00"});
                table1.AddRow(new string[] {
                            "4ecb63c5-45a3-4171-b3fb-80cbf065c3bb",
                            "2",
                            "EmPreparo",
                            "2024-11-20 13:05:00"});
#line 4
 await testRunner.GivenAsync("os seguintes pedidos estão cadastrados:", ((string)(null)), table1, "Dados ");
#line hidden
#line 8
 await testRunner.WhenAsync(("eu solicitar a atualização do pedido id 4ecb63c5-45a3-4171-b3fb-80cbf065c3bb para" +
                        " o status Pronto"), ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 9
 await testRunner.ThenAsync("deve atualizar o status do pedido", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 10
 await testRunner.AndAsync("retornar o novo status na resposta", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pedido não existe")]
        public async System.Threading.Tasks.Task PedidoNaoExiste()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Pedido não existe", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "pedidoId",
                            "QueueKey",
                            "Status",
                            "CreationTime"});
                table2.AddRow(new string[] {
                            "e516249a-93bc-439a-b004-0bf15e42c3ad",
                            "3",
                            "Recebido",
                            "2024-11-20 13:06:00"});
                table2.AddRow(new string[] {
                            "4ecb63c5-45a3-4171-b3fb-80cbf065c3bb",
                            "2",
                            "EmPreparo",
                            "2024-11-20 13:05:00"});
#line 13
 await testRunner.GivenAsync("os seguintes pedidos estão cadastrados:", ((string)(null)), table2, "Dados ");
#line hidden
#line 17
 await testRunner.WhenAsync(("eu solicitar a atualização do pedido id 8abea682-b18c-4a83-8c01-86a8b60c87cc para" +
                        " o status Pronto"), ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 18
 await testRunner.ThenAsync("deve retornar mensagem dizendo que pedido não existe", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
