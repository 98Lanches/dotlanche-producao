// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dotlanche.Producao.BDDTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Iniciar Producao Pedido")]
    public partial class IniciarProducaoPedidoFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "IniciarProducaoPedido.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Features", "Iniciar Producao Pedido", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Iniciar producao pedido válido")]
        public async System.Threading.Tasks.Task IniciarProducaoPedidoValido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Iniciar producao pedido válido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
 await testRunner.GivenAsync("um pedido confirmado com id da753f8c-3871-49a1-a55f-c0404bc609bb", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Id",
                            "Name",
                            "Categoria",
                            "Price"});
                table3.AddRow(new string[] {
                            "e8cb19fa-bc00-4f66-83fc-b60fe9b5c9f7",
                            "Hambúrguer",
                            "Lanches",
                            "9,99"});
                table3.AddRow(new string[] {
                            "d9785d54-a0ea-4b99-a8c5-acb627f94c36",
                            "Batata Frita",
                            "Acompanhamento",
                            "5,99"});
                table3.AddRow(new string[] {
                            "04e5850f-3cdd-40ad-9a63-2876fe270e6b",
                            "Coca-Cola",
                            "Bebida",
                            "5,99"});
#line 5
 await testRunner.AndAsync("os seguintes produtos existam no servico de produto:", ((string)(null)), table3, "E ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "ComboId",
                            "ProdutoId"});
                table4.AddRow(new string[] {
                            "16d8ddb9-b0d7-4b5e-939f-5ca529a7aaff",
                            "e8cb19fa-bc00-4f66-83fc-b60fe9b5c9f7"});
                table4.AddRow(new string[] {
                            "16d8ddb9-b0d7-4b5e-939f-5ca529a7aaff",
                            "d9785d54-a0ea-4b99-a8c5-acb627f94c36"});
                table4.AddRow(new string[] {
                            "16d8ddb9-b0d7-4b5e-939f-5ca529a7aaff",
                            "04e5850f-3cdd-40ad-9a63-2876fe270e6b"});
#line 10
 await testRunner.AndAsync("o pedido possui os seguintes combos:", ((string)(null)), table4, "E ");
#line hidden
#line 15
 await testRunner.WhenAsync("eu solicitar o inicio da producao do pedido", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 16
 await testRunner.ThenAsync("a producao do pedido deve ser iniciada com os produtos do pedido confirmado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 17
 await testRunner.AndAsync("deve gerar uma senha", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 18
 await testRunner.AndAsync("o pedido deve ter o status Recebido", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
